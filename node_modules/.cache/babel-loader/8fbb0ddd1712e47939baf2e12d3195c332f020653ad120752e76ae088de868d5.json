{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ABC\\\\Desktop\\\\Chandrapal\\\\src\\\\components\\\\Background3D.tsx\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect } from 'react';\nimport * as THREE from 'three';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Background3D = () => {\n  _s();\n  const mountRef = useRef(null);\n  const sceneRef = useRef(null);\n  const rendererRef = useRef(null);\n  const animationIdRef = useRef(null);\n  useEffect(() => {\n    if (!mountRef.current) return;\n\n    // Scene setup\n    const scene = new THREE.Scene();\n    sceneRef.current = scene;\n\n    // Camera setup\n    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n    camera.position.z = 10;\n\n    // Renderer setup\n    const renderer = new THREE.WebGLRenderer({\n      alpha: true,\n      antialias: true\n    });\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    renderer.setClearColor(0x000000, 0);\n    rendererRef.current = renderer;\n    mountRef.current.appendChild(renderer.domElement);\n\n    // Create DNA-like helix structure\n    const helixGeometry = new THREE.BufferGeometry();\n    const helixPoints = [];\n    const helixCount = 200;\n    for (let i = 0; i < helixCount; i++) {\n      const t = i / helixCount * Math.PI * 4;\n      const x = Math.cos(t) * 3;\n      const y = (i / helixCount - 0.5) * 8;\n      const z = Math.sin(t) * 3;\n      helixPoints.push(x, y, z);\n    }\n    helixGeometry.setAttribute('position', new THREE.Float32BufferAttribute(helixPoints, 3));\n    const helixMaterial = new THREE.PointsMaterial({\n      color: 0x00ffff,\n      size: 0.1,\n      transparent: true,\n      opacity: 0.6\n    });\n    const helix = new THREE.Points(helixGeometry, helixMaterial);\n    scene.add(helix);\n\n    // Create floating orbs with different colors\n    const orbs = [];\n    const orbColors = [0xff6b6b, 0x4ecdc4, 0x45b7d1, 0x96ceb4, 0xfeca57];\n    for (let i = 0; i < 12; i++) {\n      const geometry = new THREE.SphereGeometry(0.4, 16, 16);\n      const material = new THREE.MeshBasicMaterial({\n        color: orbColors[i % orbColors.length],\n        transparent: true,\n        opacity: 0.3,\n        wireframe: true\n      });\n      const orb = new THREE.Mesh(geometry, material);\n      orb.position.set((Math.random() - 0.5) * 20, (Math.random() - 0.5) * 20, (Math.random() - 0.5) * 20);\n      scene.add(orb);\n      orbs.push(orb);\n    }\n\n    // Create energy waves\n    const waveGeometry = new THREE.PlaneGeometry(30, 30, 20, 20);\n    const waveMaterial = new THREE.MeshBasicMaterial({\n      color: 0x4a90e2,\n      transparent: true,\n      opacity: 0.1,\n      wireframe: true,\n      side: THREE.DoubleSide\n    });\n    const wave = new THREE.Mesh(waveGeometry, waveMaterial);\n    wave.rotation.x = Math.PI / 2;\n    wave.position.z = -5;\n    scene.add(wave);\n\n    // Create floating particles with trails\n    const particlesGeometry = new THREE.BufferGeometry();\n    const particlesCount = 3000;\n    const positions = new Float32Array(particlesCount * 3);\n    const colors = new Float32Array(particlesCount * 3);\n    for (let i = 0; i < particlesCount * 3; i += 3) {\n      positions[i] = (Math.random() - 0.5) * 40;\n      positions[i + 1] = (Math.random() - 0.5) * 40;\n      positions[i + 2] = (Math.random() - 0.5) * 40;\n\n      // Create rainbow-like colors\n      const hue = Math.random();\n      const color = new THREE.Color().setHSL(hue, 0.8, 0.6);\n      colors[i] = color.r;\n      colors[i + 1] = color.g;\n      colors[i + 2] = color.b;\n    }\n    particlesGeometry.setAttribute('position', new THREE.BufferAttribute(positions, 3));\n    particlesGeometry.setAttribute('color', new THREE.BufferAttribute(colors, 3));\n    const particlesMaterial = new THREE.PointsMaterial({\n      size: 0.08,\n      vertexColors: true,\n      transparent: true,\n      opacity: 0.8\n    });\n    const particles = new THREE.Points(particlesGeometry, particlesMaterial);\n    scene.add(particles);\n\n    // Create rotating cubes with different rotations\n    const cubes = [];\n    for (let i = 0; i < 8; i++) {\n      const geometry = new THREE.BoxGeometry(1, 1, 1);\n      const material = new THREE.MeshBasicMaterial({\n        color: new THREE.Color().setHSL(0.1 + i * 0.1, 0.7, 0.5),\n        transparent: true,\n        opacity: 0.15,\n        wireframe: true\n      });\n      const cube = new THREE.Mesh(geometry, material);\n      cube.position.set((Math.random() - 0.5) * 25, (Math.random() - 0.5) * 25, (Math.random() - 0.5) * 25);\n      scene.add(cube);\n      cubes.push(cube);\n    }\n\n    // Animation\n    const animate = () => {\n      animationIdRef.current = requestAnimationFrame(animate);\n\n      // Rotate helix\n      helix.rotation.y += 0.005;\n      helix.rotation.x += 0.002;\n\n      // Animate orbs\n      orbs.forEach((orb, index) => {\n        orb.rotation.x += 0.02;\n        orb.rotation.y += 0.02;\n        orb.position.y += Math.sin(Date.now() * 0.001 + index) * 0.003;\n        orb.position.x += Math.cos(Date.now() * 0.001 + index) * 0.002;\n        orb.position.z += Math.sin(Date.now() * 0.0005 + index) * 0.001;\n      });\n\n      // Animate wave\n      wave.rotation.z += 0.01;\n      wave.position.y += Math.sin(Date.now() * 0.0003) * 0.1;\n\n      // Animate particles\n      particles.rotation.y += 0.001;\n      particles.rotation.x += 0.0005;\n\n      // Animate cubes\n      cubes.forEach((cube, index) => {\n        cube.rotation.x += 0.02;\n        cube.rotation.y += 0.02;\n        cube.rotation.z += 0.01;\n        cube.position.y += Math.sin(Date.now() * 0.001 + index * 2) * 0.002;\n        cube.position.x += Math.cos(Date.now() * 0.001 + index) * 0.001;\n      });\n\n      // Camera movement\n      camera.position.x = Math.sin(Date.now() * 0.0003) * 3;\n      camera.position.y = Math.cos(Date.now() * 0.0002) * 2;\n      camera.lookAt(0, 0, 0);\n      renderer.render(scene, camera);\n    };\n    animate();\n\n    // Handle resize\n    const handleResize = () => {\n      camera.aspect = window.innerWidth / window.innerHeight;\n      camera.updateProjectionMatrix();\n      renderer.setSize(window.innerWidth, window.innerHeight);\n    };\n    window.addEventListener('resize', handleResize);\n    return () => {\n      window.removeEventListener('resize', handleResize);\n      if (animationIdRef.current) {\n        cancelAnimationFrame(animationIdRef.current);\n      }\n      if (mountRef.current && renderer.domElement) {\n        mountRef.current.removeChild(renderer.domElement);\n      }\n      renderer.dispose();\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: mountRef,\n    className: \"fixed inset-0 pointer-events-none z-0\",\n    style: {\n      zIndex: 0\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 212,\n    columnNumber: 5\n  }, this);\n};\n_s(Background3D, \"++w1yV88wcHyn5I/zggwGQruTXs=\");\n_c = Background3D;\nexport default Background3D;\nvar _c;\n$RefreshReg$(_c, \"Background3D\");","map":{"version":3,"names":["React","useRef","useEffect","THREE","jsxDEV","_jsxDEV","Background3D","_s","mountRef","sceneRef","rendererRef","animationIdRef","current","scene","Scene","camera","PerspectiveCamera","window","innerWidth","innerHeight","position","z","renderer","WebGLRenderer","alpha","antialias","setSize","setClearColor","appendChild","domElement","helixGeometry","BufferGeometry","helixPoints","helixCount","i","t","Math","PI","x","cos","y","sin","push","setAttribute","Float32BufferAttribute","helixMaterial","PointsMaterial","color","size","transparent","opacity","helix","Points","add","orbs","orbColors","geometry","SphereGeometry","material","MeshBasicMaterial","length","wireframe","orb","Mesh","set","random","waveGeometry","PlaneGeometry","waveMaterial","side","DoubleSide","wave","rotation","particlesGeometry","particlesCount","positions","Float32Array","colors","hue","Color","setHSL","r","g","b","BufferAttribute","particlesMaterial","vertexColors","particles","cubes","BoxGeometry","cube","animate","requestAnimationFrame","forEach","index","Date","now","lookAt","render","handleResize","aspect","updateProjectionMatrix","addEventListener","removeEventListener","cancelAnimationFrame","removeChild","dispose","ref","className","style","zIndex","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/ABC/Desktop/Chandrapal/src/components/Background3D.tsx"],"sourcesContent":["import React, { useRef, useEffect } from 'react';\r\nimport * as THREE from 'three';\r\n\r\nconst Background3D: React.FC = () => {\r\n  const mountRef = useRef<HTMLDivElement>(null);\r\n  const sceneRef = useRef<THREE.Scene | null>(null);\r\n  const rendererRef = useRef<THREE.WebGLRenderer | null>(null);\r\n  const animationIdRef = useRef<number | null>(null);\r\n\r\n  useEffect(() => {\r\n    if (!mountRef.current) return;\r\n\r\n    // Scene setup\r\n    const scene = new THREE.Scene();\r\n    sceneRef.current = scene;\r\n\r\n    // Camera setup\r\n    const camera = new THREE.PerspectiveCamera(\r\n      75,\r\n      window.innerWidth / window.innerHeight,\r\n      0.1,\r\n      1000\r\n    );\r\n    camera.position.z = 10;\r\n\r\n    // Renderer setup\r\n    const renderer = new THREE.WebGLRenderer({ \r\n      alpha: true, \r\n      antialias: true \r\n    });\r\n    renderer.setSize(window.innerWidth, window.innerHeight);\r\n    renderer.setClearColor(0x000000, 0);\r\n    rendererRef.current = renderer;\r\n    mountRef.current.appendChild(renderer.domElement);\r\n\r\n    // Create DNA-like helix structure\r\n    const helixGeometry = new THREE.BufferGeometry();\r\n    const helixPoints = [];\r\n    const helixCount = 200;\r\n    \r\n    for (let i = 0; i < helixCount; i++) {\r\n      const t = i / helixCount * Math.PI * 4;\r\n      const x = Math.cos(t) * 3;\r\n      const y = (i / helixCount - 0.5) * 8;\r\n      const z = Math.sin(t) * 3;\r\n      helixPoints.push(x, y, z);\r\n    }\r\n    \r\n    helixGeometry.setAttribute('position', new THREE.Float32BufferAttribute(helixPoints, 3));\r\n    const helixMaterial = new THREE.PointsMaterial({\r\n      color: 0x00ffff,\r\n      size: 0.1,\r\n      transparent: true,\r\n      opacity: 0.6,\r\n    });\r\n    const helix = new THREE.Points(helixGeometry, helixMaterial);\r\n    scene.add(helix);\r\n\r\n    // Create floating orbs with different colors\r\n    const orbs: THREE.Mesh[] = [];\r\n    const orbColors = [0xff6b6b, 0x4ecdc4, 0x45b7d1, 0x96ceb4, 0xfeca57];\r\n    \r\n    for (let i = 0; i < 12; i++) {\r\n      const geometry = new THREE.SphereGeometry(0.4, 16, 16);\r\n      const material = new THREE.MeshBasicMaterial({\r\n        color: orbColors[i % orbColors.length],\r\n        transparent: true,\r\n        opacity: 0.3,\r\n        wireframe: true,\r\n      });\r\n      const orb = new THREE.Mesh(geometry, material);\r\n      orb.position.set(\r\n        (Math.random() - 0.5) * 20,\r\n        (Math.random() - 0.5) * 20,\r\n        (Math.random() - 0.5) * 20\r\n      );\r\n      scene.add(orb);\r\n      orbs.push(orb);\r\n    }\r\n\r\n    // Create energy waves\r\n    const waveGeometry = new THREE.PlaneGeometry(30, 30, 20, 20);\r\n    const waveMaterial = new THREE.MeshBasicMaterial({\r\n      color: 0x4a90e2,\r\n      transparent: true,\r\n      opacity: 0.1,\r\n      wireframe: true,\r\n      side: THREE.DoubleSide,\r\n    });\r\n    const wave = new THREE.Mesh(waveGeometry, waveMaterial);\r\n    wave.rotation.x = Math.PI / 2;\r\n    wave.position.z = -5;\r\n    scene.add(wave);\r\n\r\n    // Create floating particles with trails\r\n    const particlesGeometry = new THREE.BufferGeometry();\r\n    const particlesCount = 3000;\r\n    const positions = new Float32Array(particlesCount * 3);\r\n    const colors = new Float32Array(particlesCount * 3);\r\n\r\n    for (let i = 0; i < particlesCount * 3; i += 3) {\r\n      positions[i] = (Math.random() - 0.5) * 40;\r\n      positions[i + 1] = (Math.random() - 0.5) * 40;\r\n      positions[i + 2] = (Math.random() - 0.5) * 40;\r\n      \r\n      // Create rainbow-like colors\r\n      const hue = Math.random();\r\n      const color = new THREE.Color().setHSL(hue, 0.8, 0.6);\r\n      colors[i] = color.r;\r\n      colors[i + 1] = color.g;\r\n      colors[i + 2] = color.b;\r\n    }\r\n\r\n    particlesGeometry.setAttribute('position', new THREE.BufferAttribute(positions, 3));\r\n    particlesGeometry.setAttribute('color', new THREE.BufferAttribute(colors, 3));\r\n\r\n    const particlesMaterial = new THREE.PointsMaterial({\r\n      size: 0.08,\r\n      vertexColors: true,\r\n      transparent: true,\r\n      opacity: 0.8,\r\n    });\r\n    const particles = new THREE.Points(particlesGeometry, particlesMaterial);\r\n    scene.add(particles);\r\n\r\n    // Create rotating cubes with different rotations\r\n    const cubes: THREE.Mesh[] = [];\r\n    for (let i = 0; i < 8; i++) {\r\n      const geometry = new THREE.BoxGeometry(1, 1, 1);\r\n      const material = new THREE.MeshBasicMaterial({\r\n        color: new THREE.Color().setHSL(0.1 + i * 0.1, 0.7, 0.5),\r\n        transparent: true,\r\n        opacity: 0.15,\r\n        wireframe: true,\r\n      });\r\n      const cube = new THREE.Mesh(geometry, material);\r\n      cube.position.set(\r\n        (Math.random() - 0.5) * 25,\r\n        (Math.random() - 0.5) * 25,\r\n        (Math.random() - 0.5) * 25\r\n      );\r\n      scene.add(cube);\r\n      cubes.push(cube);\r\n    }\r\n\r\n    // Animation\r\n    const animate = () => {\r\n      animationIdRef.current = requestAnimationFrame(animate);\r\n\r\n      // Rotate helix\r\n      helix.rotation.y += 0.005;\r\n      helix.rotation.x += 0.002;\r\n\r\n      // Animate orbs\r\n      orbs.forEach((orb, index) => {\r\n        orb.rotation.x += 0.02;\r\n        orb.rotation.y += 0.02;\r\n        orb.position.y += Math.sin(Date.now() * 0.001 + index) * 0.003;\r\n        orb.position.x += Math.cos(Date.now() * 0.001 + index) * 0.002;\r\n        orb.position.z += Math.sin(Date.now() * 0.0005 + index) * 0.001;\r\n      });\r\n\r\n      // Animate wave\r\n      wave.rotation.z += 0.01;\r\n      wave.position.y += Math.sin(Date.now() * 0.0003) * 0.1;\r\n\r\n      // Animate particles\r\n      particles.rotation.y += 0.001;\r\n      particles.rotation.x += 0.0005;\r\n\r\n      // Animate cubes\r\n      cubes.forEach((cube, index) => {\r\n        cube.rotation.x += 0.02;\r\n        cube.rotation.y += 0.02;\r\n        cube.rotation.z += 0.01;\r\n        cube.position.y += Math.sin(Date.now() * 0.001 + index * 2) * 0.002;\r\n        cube.position.x += Math.cos(Date.now() * 0.001 + index) * 0.001;\r\n      });\r\n\r\n      // Camera movement\r\n      camera.position.x = Math.sin(Date.now() * 0.0003) * 3;\r\n      camera.position.y = Math.cos(Date.now() * 0.0002) * 2;\r\n      camera.lookAt(0, 0, 0);\r\n\r\n      renderer.render(scene, camera);\r\n    };\r\n\r\n    animate();\r\n\r\n    // Handle resize\r\n    const handleResize = () => {\r\n      camera.aspect = window.innerWidth / window.innerHeight;\r\n      camera.updateProjectionMatrix();\r\n      renderer.setSize(window.innerWidth, window.innerHeight);\r\n    };\r\n\r\n    window.addEventListener('resize', handleResize);\r\n\r\n    return () => {\r\n      window.removeEventListener('resize', handleResize);\r\n      if (animationIdRef.current) {\r\n        cancelAnimationFrame(animationIdRef.current);\r\n      }\r\n      if (mountRef.current && renderer.domElement) {\r\n        mountRef.current.removeChild(renderer.domElement);\r\n      }\r\n      renderer.dispose();\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div\r\n      ref={mountRef}\r\n      className=\"fixed inset-0 pointer-events-none z-0\"\r\n      style={{ zIndex: 0 }}\r\n    />\r\n  );\r\n};\r\n\r\nexport default Background3D; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}