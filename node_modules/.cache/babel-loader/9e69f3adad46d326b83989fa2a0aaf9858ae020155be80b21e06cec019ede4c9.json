{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ABC\\\\Desktop\\\\Chandrapal\\\\src\\\\components\\\\Background3D.tsx\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect } from 'react';\nimport * as THREE from 'three';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Background3D = () => {\n  _s();\n  const mountRef = useRef(null);\n  const sceneRef = useRef(null);\n  const rendererRef = useRef(null);\n  const animationIdRef = useRef(null);\n  useEffect(() => {\n    if (!mountRef.current) return;\n\n    // Scene setup\n    const scene = new THREE.Scene();\n    sceneRef.current = scene;\n\n    // Camera setup\n    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n    camera.position.z = 8;\n\n    // Renderer setup\n    const renderer = new THREE.WebGLRenderer({\n      alpha: true,\n      antialias: true\n    });\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    renderer.setClearColor(0x000000, 0);\n    rendererRef.current = renderer;\n    mountRef.current.appendChild(renderer.domElement);\n\n    // Create animated particles\n    const particlesGeometry = new THREE.BufferGeometry();\n    const particlesCount = 2000;\n    const positions = new Float32Array(particlesCount * 3);\n    const colors = new Float32Array(particlesCount * 3);\n    for (let i = 0; i < particlesCount * 3; i += 3) {\n      positions[i] = (Math.random() - 0.5) * 30;\n      positions[i + 1] = (Math.random() - 0.5) * 30;\n      positions[i + 2] = (Math.random() - 0.5) * 30;\n\n      // Create gradient colors\n      colors[i] = Math.random() * 0.5 + 0.5; // R\n      colors[i + 1] = Math.random() * 0.3 + 0.7; // G\n      colors[i + 2] = Math.random() * 0.8 + 0.2; // B\n    }\n    particlesGeometry.setAttribute('position', new THREE.BufferAttribute(positions, 3));\n    particlesGeometry.setAttribute('color', new THREE.BufferAttribute(colors, 3));\n    const particlesMaterial = new THREE.PointsMaterial({\n      size: 0.05,\n      vertexColors: true,\n      transparent: true,\n      opacity: 0.8\n    });\n    const particles = new THREE.Points(particlesGeometry, particlesMaterial);\n    scene.add(particles);\n\n    // Create floating spheres\n    const spheres = [];\n    for (let i = 0; i < 8; i++) {\n      const geometry = new THREE.SphereGeometry(0.3, 16, 16);\n      const material = new THREE.MeshBasicMaterial({\n        color: new THREE.Color().setHSL(Math.random() * 0.3 + 0.6, 0.8, 0.5),\n        transparent: true,\n        opacity: 0.4,\n        wireframe: true\n      });\n      const sphere = new THREE.Mesh(geometry, material);\n      sphere.position.set((Math.random() - 0.5) * 15, (Math.random() - 0.5) * 15, (Math.random() - 0.5) * 15);\n      scene.add(sphere);\n      spheres.push(sphere);\n    }\n\n    // Create rotating rings\n    const rings = [];\n    for (let i = 0; i < 3; i++) {\n      const geometry = new THREE.TorusGeometry(2 + i * 1.5, 0.1, 8, 100);\n      const material = new THREE.MeshBasicMaterial({\n        color: new THREE.Color().setHSL(0.6 + i * 0.1, 0.8, 0.6),\n        transparent: true,\n        opacity: 0.3,\n        wireframe: true\n      });\n      const ring = new THREE.Mesh(geometry, material);\n      ring.rotation.x = Math.PI / 2;\n      ring.position.z = -5 + i * 2;\n      scene.add(ring);\n      rings.push(ring);\n    }\n\n    // Create floating cubes with different rotations\n    const cubes = [];\n    for (let i = 0; i < 6; i++) {\n      const geometry = new THREE.BoxGeometry(0.8, 0.8, 0.8);\n      const material = new THREE.MeshBasicMaterial({\n        color: new THREE.Color().setHSL(0.1 + i * 0.15, 0.7, 0.5),\n        transparent: true,\n        opacity: 0.2,\n        wireframe: true\n      });\n      const cube = new THREE.Mesh(geometry, material);\n      cube.position.set((Math.random() - 0.5) * 20, (Math.random() - 0.5) * 20, (Math.random() - 0.5) * 20);\n      scene.add(cube);\n      cubes.push(cube);\n    }\n\n    // Animation\n    const animate = () => {\n      animationIdRef.current = requestAnimationFrame(animate);\n\n      // Rotate particles\n      particles.rotation.y += 0.001;\n      particles.rotation.x += 0.0005;\n\n      // Animate spheres\n      spheres.forEach((sphere, index) => {\n        sphere.rotation.x += 0.02;\n        sphere.rotation.y += 0.02;\n        sphere.position.y += Math.sin(Date.now() * 0.001 + index) * 0.002;\n        sphere.position.x += Math.cos(Date.now() * 0.001 + index) * 0.001;\n      });\n\n      // Animate rings\n      rings.forEach((ring, index) => {\n        ring.rotation.z += 0.01 + index * 0.005;\n        ring.position.y += Math.sin(Date.now() * 0.0005 + index) * 0.001;\n      });\n\n      // Animate cubes\n      cubes.forEach((cube, index) => {\n        cube.rotation.x += 0.015;\n        cube.rotation.y += 0.015;\n        cube.position.y += Math.sin(Date.now() * 0.001 + index * 2) * 0.001;\n        cube.position.z += Math.cos(Date.now() * 0.001 + index) * 0.001;\n      });\n\n      // Camera movement\n      camera.position.x = Math.sin(Date.now() * 0.0005) * 2;\n      camera.position.y = Math.cos(Date.now() * 0.0003) * 1;\n      camera.lookAt(0, 0, 0);\n      renderer.render(scene, camera);\n    };\n    animate();\n\n    // Handle resize\n    const handleResize = () => {\n      camera.aspect = window.innerWidth / window.innerHeight;\n      camera.updateProjectionMatrix();\n      renderer.setSize(window.innerWidth, window.innerHeight);\n    };\n    window.addEventListener('resize', handleResize);\n    return () => {\n      window.removeEventListener('resize', handleResize);\n      if (animationIdRef.current) {\n        cancelAnimationFrame(animationIdRef.current);\n      }\n      if (mountRef.current && renderer.domElement) {\n        mountRef.current.removeChild(renderer.domElement);\n      }\n      renderer.dispose();\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: mountRef,\n    className: \"fixed inset-0 pointer-events-none z-0\",\n    style: {\n      zIndex: 0\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 184,\n    columnNumber: 5\n  }, this);\n};\n_s(Background3D, \"++w1yV88wcHyn5I/zggwGQruTXs=\");\n_c = Background3D;\nexport default Background3D;\nvar _c;\n$RefreshReg$(_c, \"Background3D\");","map":{"version":3,"names":["React","useRef","useEffect","THREE","jsxDEV","_jsxDEV","Background3D","_s","mountRef","sceneRef","rendererRef","animationIdRef","current","scene","Scene","camera","PerspectiveCamera","window","innerWidth","innerHeight","position","z","renderer","WebGLRenderer","alpha","antialias","setSize","setClearColor","appendChild","domElement","particlesGeometry","BufferGeometry","particlesCount","positions","Float32Array","colors","i","Math","random","setAttribute","BufferAttribute","particlesMaterial","PointsMaterial","size","vertexColors","transparent","opacity","particles","Points","add","spheres","geometry","SphereGeometry","material","MeshBasicMaterial","color","Color","setHSL","wireframe","sphere","Mesh","set","push","rings","TorusGeometry","ring","rotation","x","PI","cubes","BoxGeometry","cube","animate","requestAnimationFrame","y","forEach","index","sin","Date","now","cos","lookAt","render","handleResize","aspect","updateProjectionMatrix","addEventListener","removeEventListener","cancelAnimationFrame","removeChild","dispose","ref","className","style","zIndex","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/ABC/Desktop/Chandrapal/src/components/Background3D.tsx"],"sourcesContent":["import React, { useRef, useEffect } from 'react';\r\nimport * as THREE from 'three';\r\n\r\nconst Background3D: React.FC = () => {\r\n  const mountRef = useRef<HTMLDivElement>(null);\r\n  const sceneRef = useRef<THREE.Scene | null>(null);\r\n  const rendererRef = useRef<THREE.WebGLRenderer | null>(null);\r\n  const animationIdRef = useRef<number | null>(null);\r\n\r\n  useEffect(() => {\r\n    if (!mountRef.current) return;\r\n\r\n    // Scene setup\r\n    const scene = new THREE.Scene();\r\n    sceneRef.current = scene;\r\n\r\n    // Camera setup\r\n    const camera = new THREE.PerspectiveCamera(\r\n      75,\r\n      window.innerWidth / window.innerHeight,\r\n      0.1,\r\n      1000\r\n    );\r\n    camera.position.z = 8;\r\n\r\n    // Renderer setup\r\n    const renderer = new THREE.WebGLRenderer({ \r\n      alpha: true, \r\n      antialias: true \r\n    });\r\n    renderer.setSize(window.innerWidth, window.innerHeight);\r\n    renderer.setClearColor(0x000000, 0);\r\n    rendererRef.current = renderer;\r\n    mountRef.current.appendChild(renderer.domElement);\r\n\r\n    // Create animated particles\r\n    const particlesGeometry = new THREE.BufferGeometry();\r\n    const particlesCount = 2000;\r\n    const positions = new Float32Array(particlesCount * 3);\r\n    const colors = new Float32Array(particlesCount * 3);\r\n\r\n    for (let i = 0; i < particlesCount * 3; i += 3) {\r\n      positions[i] = (Math.random() - 0.5) * 30;\r\n      positions[i + 1] = (Math.random() - 0.5) * 30;\r\n      positions[i + 2] = (Math.random() - 0.5) * 30;\r\n      \r\n      // Create gradient colors\r\n      colors[i] = Math.random() * 0.5 + 0.5; // R\r\n      colors[i + 1] = Math.random() * 0.3 + 0.7; // G\r\n      colors[i + 2] = Math.random() * 0.8 + 0.2; // B\r\n    }\r\n\r\n    particlesGeometry.setAttribute('position', new THREE.BufferAttribute(positions, 3));\r\n    particlesGeometry.setAttribute('color', new THREE.BufferAttribute(colors, 3));\r\n\r\n    const particlesMaterial = new THREE.PointsMaterial({\r\n      size: 0.05,\r\n      vertexColors: true,\r\n      transparent: true,\r\n      opacity: 0.8,\r\n    });\r\n    const particles = new THREE.Points(particlesGeometry, particlesMaterial);\r\n    scene.add(particles);\r\n\r\n    // Create floating spheres\r\n    const spheres: THREE.Mesh[] = [];\r\n    for (let i = 0; i < 8; i++) {\r\n      const geometry = new THREE.SphereGeometry(0.3, 16, 16);\r\n      const material = new THREE.MeshBasicMaterial({\r\n        color: new THREE.Color().setHSL(Math.random() * 0.3 + 0.6, 0.8, 0.5),\r\n        transparent: true,\r\n        opacity: 0.4,\r\n        wireframe: true,\r\n      });\r\n      const sphere = new THREE.Mesh(geometry, material);\r\n      sphere.position.set(\r\n        (Math.random() - 0.5) * 15,\r\n        (Math.random() - 0.5) * 15,\r\n        (Math.random() - 0.5) * 15\r\n      );\r\n      scene.add(sphere);\r\n      spheres.push(sphere);\r\n    }\r\n\r\n    // Create rotating rings\r\n    const rings: THREE.Mesh[] = [];\r\n    for (let i = 0; i < 3; i++) {\r\n      const geometry = new THREE.TorusGeometry(2 + i * 1.5, 0.1, 8, 100);\r\n      const material = new THREE.MeshBasicMaterial({\r\n        color: new THREE.Color().setHSL(0.6 + i * 0.1, 0.8, 0.6),\r\n        transparent: true,\r\n        opacity: 0.3,\r\n        wireframe: true,\r\n      });\r\n      const ring = new THREE.Mesh(geometry, material);\r\n      ring.rotation.x = Math.PI / 2;\r\n      ring.position.z = -5 + i * 2;\r\n      scene.add(ring);\r\n      rings.push(ring);\r\n    }\r\n\r\n    // Create floating cubes with different rotations\r\n    const cubes: THREE.Mesh[] = [];\r\n    for (let i = 0; i < 6; i++) {\r\n      const geometry = new THREE.BoxGeometry(0.8, 0.8, 0.8);\r\n      const material = new THREE.MeshBasicMaterial({\r\n        color: new THREE.Color().setHSL(0.1 + i * 0.15, 0.7, 0.5),\r\n        transparent: true,\r\n        opacity: 0.2,\r\n        wireframe: true,\r\n      });\r\n      const cube = new THREE.Mesh(geometry, material);\r\n      cube.position.set(\r\n        (Math.random() - 0.5) * 20,\r\n        (Math.random() - 0.5) * 20,\r\n        (Math.random() - 0.5) * 20\r\n      );\r\n      scene.add(cube);\r\n      cubes.push(cube);\r\n    }\r\n\r\n    // Animation\r\n    const animate = () => {\r\n      animationIdRef.current = requestAnimationFrame(animate);\r\n\r\n      // Rotate particles\r\n      particles.rotation.y += 0.001;\r\n      particles.rotation.x += 0.0005;\r\n\r\n      // Animate spheres\r\n      spheres.forEach((sphere, index) => {\r\n        sphere.rotation.x += 0.02;\r\n        sphere.rotation.y += 0.02;\r\n        sphere.position.y += Math.sin(Date.now() * 0.001 + index) * 0.002;\r\n        sphere.position.x += Math.cos(Date.now() * 0.001 + index) * 0.001;\r\n      });\r\n\r\n      // Animate rings\r\n      rings.forEach((ring, index) => {\r\n        ring.rotation.z += 0.01 + index * 0.005;\r\n        ring.position.y += Math.sin(Date.now() * 0.0005 + index) * 0.001;\r\n      });\r\n\r\n      // Animate cubes\r\n      cubes.forEach((cube, index) => {\r\n        cube.rotation.x += 0.015;\r\n        cube.rotation.y += 0.015;\r\n        cube.position.y += Math.sin(Date.now() * 0.001 + index * 2) * 0.001;\r\n        cube.position.z += Math.cos(Date.now() * 0.001 + index) * 0.001;\r\n      });\r\n\r\n      // Camera movement\r\n      camera.position.x = Math.sin(Date.now() * 0.0005) * 2;\r\n      camera.position.y = Math.cos(Date.now() * 0.0003) * 1;\r\n      camera.lookAt(0, 0, 0);\r\n\r\n      renderer.render(scene, camera);\r\n    };\r\n\r\n    animate();\r\n\r\n    // Handle resize\r\n    const handleResize = () => {\r\n      camera.aspect = window.innerWidth / window.innerHeight;\r\n      camera.updateProjectionMatrix();\r\n      renderer.setSize(window.innerWidth, window.innerHeight);\r\n    };\r\n\r\n    window.addEventListener('resize', handleResize);\r\n\r\n    return () => {\r\n      window.removeEventListener('resize', handleResize);\r\n      if (animationIdRef.current) {\r\n        cancelAnimationFrame(animationIdRef.current);\r\n      }\r\n      if (mountRef.current && renderer.domElement) {\r\n        mountRef.current.removeChild(renderer.domElement);\r\n      }\r\n      renderer.dispose();\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div\r\n      ref={mountRef}\r\n      className=\"fixed inset-0 pointer-events-none z-0\"\r\n      style={{ zIndex: 0 }}\r\n    />\r\n  );\r\n};\r\n\r\nexport default Background3D; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}